var fs = require("fs");
var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;

function WeatherFunction(){

	this.stateMap={};
	this.airPortMap={};
	this.fileName="./capitals.txt";
	this.APIKeys=["b323832de00f2c2f","2c50b81f5282351b", "828696a5aae9b279","58062bbbe2add910", "62cc417d1996d567", "e157d6553575df8b", "7bdee4aaa7cae4c4" ];
};

WeatherFunction.prototype={

	getTemperatureForAll: function(){
		var i=0;
		var temperatureArray = [];
		for(var state in this.stateMap){
			if(i>=7){
				i=0;
			}
			temperatureArray.push({state:state,temp:this.getTemperatureUsingKey(state, this.APIKeys[i])});
			i=i+1;
		}
		return temperatureArray;

	},

	getAttributesForAll: function(){
		var i=0;
		var attributeArray = [];
		for(var state in this.stateMap){
			if(i>=7){
				i=0;
			}
			var obj = this.getAttributesUsingKey(state, this.APIKeys[i]);
			attributeArray.push({state:state,temp:obj.current_observation.temp_f,wind:obj.current_observation.wind_mph,humidity:obj.current_observation.relative_humidity});
			i=i+1;
		}
		return attributeArray;

	},

	getTestData : function(){
		var j=0;
		for(var state in this.stateMap){
			
			for(i=1; i<=5; i++){
				var temp=i+8;
				var fileName = "./history/city" + j + "_Month" + temp + ".txt";
				//console.log("http://www.wunderground.com/history/airport/" + this.airPortMap[state] + "/2015/" + i + "/1/MonthlyHistory.html?req_city=" + this.stateMap[state] + "&req_state=" + state + "&reqdb.magic=1&reqdb.wmo=99999&format=1");
				fs.writeFileSync(fileName, this.getJSON("http://www.wunderground.com/history/airport/" + this.airPortMap[state] + "/2015/" + i + "/1/MonthlyHistory.html?req_city=" + this.stateMap[state] + "&req_state=" + state + "&reqdb.magic=1&reqdb.wmo=99999&format=1"));
			}
			j = j+1;
			console.log("Finished creating files for state:" + state);
		}
	},

	getHistoricDataForState : function(){
		for(k=0; k<50; k++){
			var oldFile = "./history/mod/mod_city"+k+".txt";
			var array = fs.readFileSync(oldFile).toString().split("\n");
			var labels = array.shift();
			var newFile = "./history/final/city_"+k+".txt";
			fs.writeFileSync(newFile, labels);
			fs.appendFileSync(newFile, "\n");
			
			for(i in array){
				var splitArray = array[i].split(",");
				if(splitArray[1] != " " && splitArray[2] != " " && splitArray[3] != " " && splitArray[1] != null ){
					var newSplitArray = [];
					newSplitArray[0] = splitArray[0]
					newSplitArray[1] = this.normalizeTemperature(splitArray[1]);
					newSplitArray[2] = this.normalizeHumidity(splitArray[2]);
					newSplitArray[3] = this.normalizeWind(splitArray[3]);
					if(splitArray[4] != " "){
						newSplitArray[4] = 1;
					}
					else
						newSplitArray[4] = 0;
					var output = newSplitArray[0]+","+newSplitArray[1]+","+newSplitArray[2]+","+newSplitArray[3]+","+newSplitArray[4];
					//console.log(output);
					fs.appendFileSync(newFile, ''+output+'\n');					
				}

			}	
		}

	},

	getCurrentRainForecast: function(data){
		var json_obj = JSON.parse(this.getJSON("http://api.openweathermap.org/data/2.5/forecast?q="+this.stateMap[data]));
		var tempDate = new Date();
		if(tempDate.getHours() >= 21){
			var date = this.getNextDate();
		}
		else
			var date = this.getCurrentDate();
		
		console.log("http://api.openweathermap.org/data/2.5/forecast?q="+this.stateMap[data]);
		
		//console.log(json_obj.list.length);
		for(i=0; i<json_obj.list.length; i++){
			//console.log(json_obj.list[i].weather[0].main);
			if(json_obj.list[i].dt_txt.indexOf(date) > -1 && json_obj.list[i].weather[0].main == "Rain"){
				return true;
			}
		}



		return false;
	},

	getCurrentDate : function(){
		var date = new Date();
		var month = '' + (date.getMonth() + 1);
        var day = '' + date.getDate();
        var year = date.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;

    return [year, month, day].join('-');

	},

	getNextDate : function(){
		var date = new Date();
		var month = '' + (date.getMonth() + 1);
        var day = '' + date.getDate();
        day = parseInt(day);
    	day=day+1;
    	day = String(day);
        var year = date.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;
    

    return [year, month, day].join('-');

	},

	normalizeTemperature: function(data){
		var input = parseInt(data);
		if(input < 10){
			return 1;
		}
		else if(input > 90){
			return 10;
		}
		else{
			var output = Math.ceil(input/10);
			return output;
		}

	},

	normalizeHumidity: function(data){
		var input = parseInt(data);
		if(input < 30){
			return 1;
		}
		else if(input > 70){
			return 10;
		}
		else{
			input = input-30;
			var output = Math.ceil((input/5) + 1);
			return output;
		}

	},

	normalizeWind: function(data){
		var input = parseInt(data);
		input = input * 1.60934;
		input = Math.ceil(input);
		if(input < 11){
			return 1;
		}
		else if(input >=12 && input <= 19){
			return 2;

		}
		else if(input >=20 && input <=28 ){
			return 3;
		}
		else if(input >=29 && input <= 38){
			return 4;

		}
		else if(input >=39 && input <= 49){
			return 5;

		}
		else if(input >=50 && input <= 61){
			return 6;

		}
		else if(input >=62 && input <= 74){
			return 7;

		}
		else if(input >=75 && input <= 88){
			return 8;

		}
		else if(input >=89 && input <= 102){
			return 9;

		}
		else if(input >102){
			return 10;

		}
		

	},

	createStateDictionary: function (){
		var array = fs.readFileSync(this.fileName).toString().split("\n");
		for(i in array) {
		    var splitArray = array[i].split(",");
		    this.stateMap[splitArray[0]] = splitArray[1];
		    this.airPortMap[splitArray[0]] = splitArray[2];
		}
		return this.stateMap;
	},

	getJSON: function(data){
		var jsonReq = new XMLHttpRequest();// a new request
		jsonReq.open("GET",data,false);
		jsonReq.send(null);
		return jsonReq.responseText;          
	},

	getAttributesUsingKey: function(stateName, key){
		//console.log("http://api.wunderground.com/api/" + key + "/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json");
		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/" + key + "/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
		return json_obj;
	},

	getTemperatureUsingKey: function(stateName, key){
		//console.log("http://api.wunderground.com/api/" + key + "/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json");
		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/" + key + "/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
		return json_obj.current_observation.temp_f;
	},

	//Need to add the API key
	getTemperature: function(stateName){

		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/b323832de00f2c2f/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
		return json_obj.current_observation.temp_f;
	},

	getHumidityUsingKey: function(stateName, key){
		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/" + key + "/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
			return json_obj.current_observation.relative_humidity;
	},

	getHumidity: function (stateName){

		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/b323832de00f2c2f/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
		return json_obj.current_observation.relative_humidity;
	},

	getWindUsingKey: function(stateName, key){
		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/" + key + "/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
			return json_obj.current_observation.wind_mph;
	},

	getWind: function (stateName){
		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/b323832de00f2c2f/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
		return json_obj.current_observation.wind_mph;
	},
};

module.exports = WeatherFunction;
