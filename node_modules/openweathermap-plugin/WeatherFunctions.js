var fs = require("fs");
var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;

//Declaring the Constructor for this module
function WeatherFunction(){

	//Statemap is a map of the states to their capitals. We populate this map in the createDictionary function.
	this.stateMap={};
	//This is used to map the nearest airports to the citiesin order to get the history
	this.airPortMap={};
	//File with the state, capital and airport values. 
	this.fileName="./capitals.txt";
	//These are the API keys required to access the API. 
	this.APIKeys=["b323832de00f2c2f","2c50b81f5282351b", "828696a5aae9b279","58062bbbe2add910", "62cc417d1996d567", "e157d6553575df8b", "7bdee4aaa7cae4c4", "4d392e45ffd13f6e", "2735c59f6f72f1a7", "15ff13a3bd69fb3a", "20560d6dc013ca07", "4db1314855aa3fb1", "a6192e4e01666e8b", "b90f357bc98930ca", "8e3b607e39130d17" ];
};

WeatherFunction.prototype={

	//This function is a prototype to get the current temperatures across all the regions
	getTemperatureForAll: function(){
		var i=0;
		var temperatureArray = [];
		for(var state in this.stateMap){
			if(i>=15){
				i=0;
			}
			temperatureArray.push({state:state,temp:this.getTemperatureUsingKey(state, this.APIKeys[i])});
			i=i+1;
		}
		return temperatureArray;

	},

	/*This function is mainly used in the app.js to get all the 3 attributes in one go
	Since API has a restriction on the number of API calls, this is an efficient method to retrieve the parameters.
	This function returns a list of JSON objects each having a state and the parameters for that state.*/
	getAttributesForAll: function(){
		var i=0;
		var attributeArray = [];
		for(var state in this.stateMap){
			if(i>=15){
				i=0;
			}
			var obj = this.getAttributesUsingKey(state, this.APIKeys[i]);
			attributeArray.push({state:state,temp:obj.current_observation.temp_f,wind:obj.current_observation.wind_mph,humidity:obj.current_observation.relative_humidity});
			i=i+1;
		}
		return attributeArray;

	},

	/*This function is used to get the initial training data from the history files. 
	  We get the history from May 2014 to May 2015. 
	  These values are written to files specified by fileName*/
	getTestData : function(){
		var j=0;
		for(var state in this.stateMap){
			
			for(i=1; i<=5; i++){
				var temp=i+8;
				var fileName = "./history/city" + j + "_Month" + temp + ".txt";
				fs.writeFile(fileName, this.getJSON("http://www.wunderground.com/history/airport/" + this.airPortMap[state] + "/2015/" + i + "/1/MonthlyHistory.html?req_city=" + this.stateMap[state] + "&req_state=" + state + "&reqdb.magic=1&reqdb.wmo=99999&format=1"));
			}
			j = j+1;
		}
	},

	/*This function is used to get the pre-processesed files which have the normalized values for the temperature, wind and humidity
	The mapping to the corresponding normalized values is done by calling the concerned normalize functions. 
	The values which have been used are then written back to a new file for us to access them*/
	getHistoricDataForState : function(){
		for(k=0; k<50; k++){
			var oldFile = "./history/mod/mod_city"+k+".txt";
			//Reading a line from the file
			var array = fs.readFile(oldFile).toString().split("\n");
			//The first entry is the labels for the columns
			var labels = array.shift();
			var newFile = "./history/final/city_"+k+".txt";
			fs.writeFile(newFile, labels);
			fs.appendFile(newFile, "\n");
			
			for(i in array){
				var splitArray = array[i].split(",");
				//Check for records which do not have any values.
				//We need to prune away these records. 
				if(splitArray[1] != " " && splitArray[2] != " " && splitArray[3] != " " && splitArray[1] != null ){
					var newSplitArray = [];
					newSplitArray[0] = splitArray[0]
					newSplitArray[1] = this.normalizeTemperature(splitArray[1]);
					newSplitArray[2] = this.normalizeHumidity(splitArray[2]);
					newSplitArray[3] = this.normalizeWind(splitArray[3]);
					if(splitArray[4] != " "){
						newSplitArray[4] = 1;
					}
					else
						newSplitArray[4] = 0;
					var output = newSplitArray[0]+","+newSplitArray[1]+","+newSplitArray[2]+","+newSplitArray[3]+","+newSplitArray[4];
					fs.appendFile(newFile, ''+output+'\n');					
				}

			}	
		}

	},

	/*This function is used to get the current forecast of Rain from the API.
	  This function is used to calculate the accuracy of our results by comparing them with these forecast values.
	  */
	getCurrentRainForecast: function(data){
		try{
			var json_obj = JSON.parse(this.getJSON("http://api.openweathermap.org/data/2.5/forecast?q="+this.stateMap[data]));
		}
		catch(err){
			return null;
		}

		var tempDate = new Date();
		if(tempDate.getHours() >= 21){
			var date = this.getNextDate();
		}
		else
			var date = this.getCurrentDate();

		//Iterating through the list of JSON objects returned. 
		for(i=0; i<json_obj.list.length; i++){
			if(json_obj.list[i].dt_txt.indexOf(date) > -1 && json_obj.list[i].weather[0].main == "Rain"){
				return true;
			}
		}

		return false;
	},

	/*This function is used to get the current date of the system*/
	getCurrentDate : function(){
		var date = new Date();
		var month = '' + (date.getMonth() + 1);
        var day = '' + date.getDate();
        var year = date.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;

    return [year, month, day].join('-');

	},

	/*This function is used to get the date of the next day for prediction purposes*/
	getNextDate : function(){
		var date = new Date();
		var month = '' + (date.getMonth() + 1);
        var day = '' + date.getDate();
        day = parseInt(day);
    	day=day+1;
    	day = String(day);
        var year = date.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;
    

    return [year, month, day].join('-');

	},

	/*We normalize the temperatures to a range between 1 to 10 since bayes cannot handle such huge ranges. 
	  We normalize these values such that every temperature below 10F is 1 and anything between 10F to 90F is mapped between 2 to 9
	  and anything above 90F is mapped to 10.*/ 
	normalizeTemperature: function(data){
		var input = parseInt(data);
		if(input < 10){
			return 1;
		}
		else if(input > 90){
			return 10;
		}
		else{
			var output = Math.ceil(input/10);
			return output;
		}

	},

	/*We normalize the humidity to a range between 1 to 10 since bayes cannot handle such huge ranges. 
	  We normalize these values such that every value of humidity below 30 is 1 and anything between 30 to 70 is mapped between 2 to 9
	  and anything above 70 is mapped to 10.*/
	normalizeHumidity: function(data){
		var input = parseInt(data);
		if(input < 30){
			return 1;
		}
		else if(input > 70){
			return 10;
		}
		else{
			input = input-30;
			var output = Math.ceil((input/5) + 1);
			return output;
		}

	},

	/*We normalize the humidity to a range between 1 to 10 since bayes cannot handle such huge ranges. 
	  we have decided these values according to the following link 
	  http://www.windows2universe.org/earth/Atmosphere/wind_speeds.html
	*/
	normalizeWind: function(data){
		var input = parseInt(data);
		input = input * 1.60934;
		input = Math.ceil(input);
		if(input < 11){
			return 1;
		}
		else if(input >=12 && input <= 19){
			return 2;

		}
		else if(input >=20 && input <=28 ){
			return 3;
		}
		else if(input >=29 && input <= 38){
			return 4;

		}
		else if(input >=39 && input <= 49){
			return 5;

		}
		else if(input >=50 && input <= 61){
			return 6;

		}
		else if(input >=62 && input <= 74){
			return 7;

		}
		else if(input >=75 && input <= 88){
			return 8;

		}
		else if(input >=89 && input <= 102){
			return 9;

		}
		else if(input >102){
			return 10;

		}
		

	},

	/*This function is used to create the map of states and their capitals along with their airports*/
	createStateDictionary: function (){
		var array = fs.readFileSync(this.fileName).toString().split("\n");
		for(i in array) {
		    var splitArray = array[i].split(",");
		    this.stateMap[splitArray[0]] = splitArray[1];
		    this.airPortMap[splitArray[0]] = splitArray[2];
		}
		return this.stateMap;
	},

	/*This function is used to get the JSON object from a URL provided. It uses the XMLHttpRequest package in java script*/
	getJSON: function(data){
		var jsonReq = new XMLHttpRequest();// a new request
		jsonReq.open("GET",data,false);
		jsonReq.send(null);
		return jsonReq.responseText;          
	},

	/*This function is used to get the temperature, wind and humidity using a given API key for a particular state
	  It returns a JSON object from which the fields are extracted later*/
	getAttributesUsingKey: function(stateName, key){
		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/" + key + "/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
		return json_obj;
	},

	/*This function is used to get the temperature using a given API key for a particular state*/
	getTemperatureUsingKey: function(stateName, key){
		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/" + key + "/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
		return json_obj.current_observation.temp_f;
	},

	/*This function is used to get the temperature without having a specific API key. The key is hardcoded into it*/
	getTemperature: function(stateName){

		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/b323832de00f2c2f/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
		return json_obj.current_observation.temp_f;
	},

	/*This function is used to get the humidity using a given API key for a particular state*/
	getHumidityUsingKey: function(stateName, key){
		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/" + key + "/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
			return json_obj.current_observation.relative_humidity;
	},

	/*This function is used to get the humidity without having a specific API key. The key is hardcoded into it*/
	getHumidity: function (stateName){

		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/b323832de00f2c2f/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
		return json_obj.current_observation.relative_humidity;
	},

	/*This function is used to get the wind using a given API key for a particular state*/
	getWindUsingKey: function(stateName, key){
		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/" + key + "/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
			return json_obj.current_observation.wind_mph;
	},

	/*This function is used to get the wind without having a specific API key. The key is hardcoded into it*/
	getWind: function (stateName){
		var json_obj = JSON.parse(this.getJSON("http://api.wunderground.com/api/b323832de00f2c2f/conditions/q/" + stateName + "/" + this.stateMap[stateName] + ".json"));
		return json_obj.current_observation.wind_mph;
	},
};

module.exports = WeatherFunction;
